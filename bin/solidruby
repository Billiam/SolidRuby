#!/usr/bin/env ruby

require 'thor'
require 'thor/group'
require 'thor/actions'
require 'solidruby'

class SolidRubyGenerator < Thor
  include Thor::Actions

  def self.source_root
    Pathname.new(Dir.home).join('.config/solidruby/templates')
  end

  desc 'templates', 'generate default templates in home directory'
  def templates
    template_dir = Pathname.new(File.expand_path(__dir__)).join('../lib/templates')

    %w(printed.tt params.tt).each do |filename|
      copy_file(template_dir.join(filename), self.class.source_root.join(filename))
    end
  end

  desc 'printed NAME', 'generate printed part'
  def printed(name)
    @clean_name = name.split(/[-|_]/).map { |s| s.capitalize }.join
    template('printed.tt', "#{name}.rb")
  end
end

class SolidRubyCli < Thor
  include Thor::Actions

  def self.source_root
    Pathname.new(Dir.home).join('.config/solidruby/templates')
  end

  desc 'version', 'shows the current version of SolidRuby'
  def version
    puts SolidRuby::VERSION
  end

  desc 'g COMMANDS', 'generator module'
  subcommand 'g', SolidRubyGenerator
end

SolidRubyCli.start(ARGV)
